
                        linux_c系统开发学习笔记
                                    ----张培川
I/O:input & output 是一切实现的基础
    stdio标准IO   sysio系统调用IO（文件IO)

stdio:FILE类型贯穿始终

fopen();    r r+ b w a 
fclose();

fgetc();
fputc();
fgets();
fputs();
fread();
fwrite()

printf();
scanf();

fseek();
ftell();
rewind();

fflush();

临时文件:
1、如何不冲突
2、及时销毁
	tmpnam tempnam 
	tmpfile


位图
r->     O_RDONLY
r+->    O_RDWR
w->     O_WRONLY|O_CREAT|O_TRUNC
W+->    O+RDWR|O_TRUNC|O_CREAT

重载和变参的区分

文件IO/系统调用IO
fd文件描述符是在文件IO中贯穿始终的类型
文件描述符的概念
[整型数 数组下标，文件描述符优先使用当前可用范围数组最小]
文件IO操作:open、close、read、write、lseek
    open 变参函数
    
文件IO与标准IO的区别
举例:传达室老大爷跑邮局
区别:响应速度&吞吐量
面试：如何使一个程序变快
提醒：标准IO和文件IO不可以混用
文件IO与标准IO转换函数 fileno fdopen

IO的效率问题
习题：将mycpy.c程序进行更改，将BUFSIZE逐步放大，观察运行时间变化，注意性能最佳拐点时bufsize的值,以及何时程序出问题
time ./mycpy /etc/services /tmp/output

文件共享 ：多个任务共同操作一个文件或者协同完成任务
面试：删除一个文件的第10行
while(){
    lseek 11 +read +lseek10 +write
}

1->open r ->fd1 ->lseek 11
2->open r+  fd2 ->leek 10
while(){
1->fd1->read
2->fd2->write
}

process1->open->read
process2->open->r+

p1 ->read
p2 ->write
补充函数truncate/ftruncate

原子操作：不可分割的操作
原子：不可分割的最小单位
原子操作的作用：解决竞争和操作
tmpnam
tmpfile

程序中的重定向：
dup,
dup2 原子操作


同步：刷新数据sync fsync fdatasync 中间层    系统级别的开发与设备相关操作

fcntl();文件描述符所变得魔术几乎都来源于该函数

ioctl();设备相关的内容 man 2 ioctl_list 设备相关

/dev/fd/目录 虚目录，显示当前进行的文件描述符信息



/*********************************************/
文件系统
知识性的内容
类似ls的实现，如myls、mycpy

一、目录和文件

1、获取文件属性
    stat:通过文件路径获取属性，面对符号链接文件时获取的是所指向的目标文件的属性
    fstat:通过文件描述符获取属性
    lstat:面对符号链接文件时获取到的是符号链接的属性
    
    st_mod 16位图
    文件类型 dcb-lsp
    d目录 
    c字符设备文件 
    b block 
    - 常规文件
    l 链接文件
    s socket

2、文件的访问权限
    st_mod 是一个16位的位图，用于表示文件类型，文件访问权限以及特殊权限
3、umask
    作用：防止产生权限过松的文件
    umask()
4、文件权限的更改/管理chmod、fchmod
    chmod(path,mode)
    fchmod(fd,mode)
5、粘住位
    t位 目录设置t位
    最初设计：二进制可执行文件保留执行痕迹，下次使用能更快点
    pagecache
6、文件系统 FAT、UFS
    文件系统:文件或数据的存储和管理
    FAT16/32 静态单链表 arr
    UFS  磁盘-柱面组|块组-
        description inode位图 块位图 inode 块 
        inode stat 亚数据信息 无关 数据块指针组【15个指针】12个直接数据块指针 三级间接化指针
        缺陷：不善于管理小文件，大量小文件，耗时查找
    位图用途:找出两个32位无符号数中的大数，
    文件名在目录文件中 inode+fname
    目录项
7、硬链接、符号链接
    硬链接与目录项是同义词，且建立硬链接有限制，不能给分区建立
    符号链接：可跨分区，可以给目录建
    ln a a_link 目录下的同义词,
    ln -s a a_s 符号链接
    link 
    ulink
    remove
    rename

8、utime时间,可以更改文件的最后读的时间和最后修改时间
    utime
    ctime 
9、目录的创建和销毁
    mkdir
    rmdir
10、切换目录，更改当前工作路径
    chdir
    fchdir
    getcwd
    突破安全机制 chroot
11、分析目录/读取目录内容
    gloab() gl_pathv

    opendir()
    closedir()
    readdir()

    rewinddir()
    seekdir()
    telldir()
二、系统数据文件和信息
1 /etc/passwd  
    getpwnam()
    getpwuid()
2 /etc/group
    getgruid()
    getgrnam()
3 /etc/shadow
    hash    混淆    不可逆，如原串相同，所得串也相同，防备管理员监守自盗
    加密  - 解密
    x%5 =2
    加密    安全
    安全？  穷举：口令随机校验
    getspiam()
    crypt();
    getpass();
4 时间戳    time_t char* struct tm
    time();
    gmtime();
    localtime();
    mktime();
    ctime();
    strftime()
三、进程环境
1、main函数
    int main(int argc,char *argv[])
        env
2、进程的终止【记熟】
    正常终止
        从main函数返回
        调用exit
        调用_exit或_Exit
        最后一个线程从其启动例程返回
        最后一个线程调用pthread_exit
    异常终止
        调用abort
        接到一个信号并终止
        最后一个线程对其取消请求作出相应
    atexit():钩子函数 |类似析构函数
3、命令行参数的分析
    getopt()
        H:带参数的选项
        -识别非选项的传参
    getopt_long()
4、环境变量
    environ char **
    getenv();
    setenv();
    putenv();
5、C程序的存储空间布局
    pmap(1)
6、库
    动态库
    静态库
    手工装载库 手工装载math库，并打印cos2.0
    dlopen();
    dlclose();
    dlerror();
    dlsym();
    *(void **)(&consine) = dlsym(handle,"cos");

7、函数跳转
    setjmp();
    longjmp();

8、资源的获取及控制
    getrlimit()
    setrlimit()



/*********************************************
                        进程的基本知识
已经进入多进程阶段，不涉及并发
1、进程标识符pid
    类型pid_t,有符号16位整型数
    命令ps -axf -axm ax -L
    进程号是顺次向下使用 文件描述符
    getpid()
    getppid()
2、进程的产生
    fork();理解关键字duplicationg意味着拷贝克隆，一模一样
    fork后父子进程的区别:
        fork的返回值不一样，pid不一样，ppid不同，为决信号和文件锁不继承，资源利用量清零
    init进程,1号，是所有进程的祖先进程
    调度器的调度策略来决定哪个进程先运行
    fflush(NULL)的重要性
    vfork();

3、进程的销亡以及释放资源
    wait();
    waitpid();pid四种情况 <-1 -1 0 >1 
    wait3();
    wait4();
    1、分块法
    2、交叉分配法
    3、池
4、exec函数族的使用   fork wait exec结合
    execl();
    execlp();
    execlpe();
    execv();
    execvp();
    fflush的重要性
5、用户权限以及组权限(u+s,g+s)
    uid r e s 
    gid r e s 
 
    getuid(); real userid
    geteuid(); effective userid
    getgid(); 真实
    getegid();
    setuid();
    setgid();
    setreuid(); 原子化操作
    setregid();
    seteuid();
    setegid();

6、观摩课:解释器文件
    脚本文件 shell根据标本文件的标记，把当前指定的解释器装载进来，执行命令
    #!/bin/bash
    ls
    whoami

7、system();
    理解:fork+exec+wait封装
8、进程会计
    acct();
9、进程时间
    times();
10、守护进程
    会话session，表示sid
    终端---虚拟终端
    setsid();
    getpgrp();
    getpgid();
    setpgid();
    前台进程组  
    后台进程组
    单实例守护进程，锁文件/var/run/name.pid
    启动脚本文件:/etc/rc*...
11、系统日志
    syslogd服务
    openlog();
    syslog();
    closelog();




*******************************************************
                            并发(信号、线程)
同步
异步
    异步事件的处理:查询法、通知法
    异步事件发生频率稀疏：通知法
              频率高：  查询法
    两种方法的一种形式,
一、信号 初步异步
1、信号的概念
    信号是软件层面的中断。
    信号的响应依赖中断。
2、signal();防止名空间冲突
    void (*sigal(int signum,void (*fun)(int)))(int);
    typedef void(*sighandler_t)(int);
    sighandler_t sigal(int signum,sighandler_t handle);
    信号会打断阻塞的系统调用 

3、信号的不可靠
    信号的行为不可靠，内核布置的执行现场，
    链式结构
4、可重入函数 解决信号不可靠
    所有的系统调用都是可重入的，一部分库函数也是可重入的，说memcpy
    rand_r()
    gmtime_r()
    
5、信号的响应过程 重点信号是从kernel回到user的路上响应的
    信号从收到到响应有一个不可避免的延迟
    思考：如何忽略掉一个信号的
        标准信号为什么要丢失
    标准信号的响应没有严格的顺序
    Mask    pending 位图
    1           0


6、信号常用函数
    kill();
        <0
        0   组内广播
        -1  全局广播
        <-1 -pgid组内广播
    raise();
        kill(getpid(),sig);
        pthread_kill(pthread_self(),sig);
    alarm();
        流控算法 流控，音频播放，视频播放，传输
        mycpy 改为mycat 
        mycat 改slowcat
        slowcat 漏桶
        slowcat2 令牌桶
    pause();

    abort();
    system();
    sleep();
        sleep->alarm+pause
        sleep->nanosleep
7、信号集
8、信号屏蔽字/pending集的处理
9、扩展
    sigsuspend();
    sigaction();
    setitimer(); 
10、实时信号
    标准信号、1-31
    实时信号、SIGRT-MIN SIGRT-MAX
二、线程    强烈异步


