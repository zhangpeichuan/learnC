			C语言学习笔记
					张培川
C语言发展史
	1960	原型A语言-ALGOL
	1963	CPL语言
	1967	BCPL
	1970	B语言
	1973	C语言
C语言特点
	1、基础性语言
	2、语法简介，紧凑，方便，灵活
	3、运算符，数据结构丰富
	4、结构化，模块化编程
	5、移植性好，执行效率高
	6、允许直接对硬件操作





















C语言学习建议
	1、概念的正确性
	2、动手能力
	3、阅读优秀的程序段
	4、大量练习，面试题

C课程讲解思路
	1、基本概念
	2、数据类型，运算法和表达式
	3、输入输出专题
	4、流程控制
	5、数组
	6、指针
	7、函数
	8、构造类型
	9、动态内存管理
	10、调试工具和调试技巧（gdb、make）
	11、常用库函数	
		
平台介绍：64位redhat、vim、gcc
自己平台 mac、vim、gcc（make）xcode

hello.c:
gcc：编译器
C源文件-预处理-编译-汇编-链接-可执行文件
gcc -E  -S -c -o 
vim配置脚本以及快捷方式
shift+k 跳转manal手册
ctrl+P 补齐命令












                一、基本概念
1、以helloword为例对写程序的思路提出如下要求：
    1）头文件正确包含的重要性
    2）以函数为单位进行程序编写
    3) 声明部分+实现部分
    4）return 0给父进程返回
    5）多用空格空行
    6）添加注释
2、算法：解决问题的方法。（流程图，NS图,有限状态机FSM）
3、程序：用某种语言实现算法
4、进程：
5、防止写越界，防止内存泄漏，谁打开谁关闭，谁申请谁释放





                二、数据类型，运算符和表达式
1、数据类型：   （基本数据类型，参考图片：） 
    1)所占字节
    2）存储区别
    3）不同类型
    4）特殊性
        1)布尔型bool
        2)float类型
        3)char型是否有符号
        4)不同类型的0值 0 '0' "0" '\0'
        5)数据类型与后续代码中所使用的输入和输出要相匹配
2、常量与变量
    常量：在程序执行过程中值不会发生变化的量
        分类：整形常量、实型常量、字符常量、字符串常量，标识常量
        整形常量：1，790，76
        实型常量：3.14 5.26
        字符常量：由单引号引起来的单个字符或者转义字符 'a' 'X' '\015' '\x7f'
        字符串常量:由双引号引起来的一个或多个字符组成的序列"a" "abXYZ"
        标识常量: define 处理是在预处理阶段，占用编译时间，
                缺点：不做语法检查，对宏体与宏名之间替换        
    变量：用来保存一些特定内容，并且在程序执行过程中值随时会发生变量
        定义：[存储类型] 数据类型  标识符 = 值
                            TYPE    NAME  = VALUE
            标识符：由字母，数字，下划线组成且不能以数字开头的一个标识序列
            写标识符尽量做到见名生义
            数据类型：基本类型+构造类型
            值:需要匹配
            存储类型：auto static register extern(说明型)
                auto:默认自动分配空间，自动回收空间
                register:(建议型)寄存器类型，只能定义局部变量，不能定义全局变量，大小有限制，只能定义32位大小的数据类型，
                如果是double就不可以，寄存器没有地址，所以一个寄存器类型的变量无法打印出地址查看或使用
                static:静态型，自动初始化位0值或空值，并值其变量有继承性,另外常用语修饰变量或者是函数[针对当前函数或者当前使用]
                extern:说明型，意味不能改变被说明的变量的值或类型
                进程空间的内存布局
    变量的生命周期和作用范围
        1)全局变量和局部变量
        2)全局变量作用范围和局部变量作用范围
        3)参考图片:存储类型比较
        












                三运算符和表达式
表达式和语句的区别

运算符部分：
    1)每个运算符所需要的参与运算的操作个数
    2)结合性
    3)优先级
    4)运算符的特殊使用
			逻辑运算符的短路特性&&只计算前面 ||两个都需要计算
    5)位运算符的重要意义 
			将操作数中的某一位置1，其他位不变 num = num ! 1<< n
						n		0	其他位不变num=num& ~(1<<n)
			测试第n位
			从一个指定宽度的某几位取出几位（？？）
				
			算数运算符+ - * / % ++ --
			关系运算符< <= == > >= !=
			逻辑运算符&& ||
			位运算符<< >> ~ | ^ &
			赋值运算符 = 扩展+= *=
			条件运算符?:
			逗号运算符,
			指针运算符* &
			求字节数sizeof
			强制类型转换(类型)
			分量运算符. ->
			下表运算符[]
			其它: (())











                    三、输入输出专题
input & output -> I/O(标准IO，文件IO)
1、格式化输入输出函数 scanf，printf
    int printf(const char * restrict format, ...);
    format:"%[修饰符] 格式字符"
    参考图片标准输出修饰符与输入输出格式字符
    
	int scanf(const char * format,...)
	format:抑制符*
	%s的使用时比较危险的，因为不知道存储空间的大小，
	scanf放在循环结构中，要注意能否接收到正常有效的内容。
2、字符输入输出函数: getchar,putchar
3、字符串输入输出函数:gets,puts
	gets:十分危险的函数，可以用fgets，getline来替换
















            四、流程控制
顺序，选择，循环
简单结构与复杂流程：自然流程
NS流程图    工具Dia
顺序：语句逐句执行
选择：出现了一种以上的情况
循环：在某个条件成立的情况下，重复执行某个动作

关键字
选择：if-else swith-case
循环：while do-while for if-goto
辅助控制：continue break 

详解 if-else else只与最近的if匹配
    if(exp)
        cmd1;
    else
        cmd2
while(exp)最少执行次数为0
        loop;
do-while    最少执行一次
do
{
    loop;
}while(exp);菜单类的功能
    do
    {
        menu()
        scanf()
        if()
          do sth;
    }while();
    
    menu()
    scanf()
    while()
    {
         do sth
            menu();
            scanf();
    }
for:最少循环0次 可以省略exp
    for(exp1;exp2;exp3)
                loop;
if-goto:慎用:goto实现的是无条件的跳转且不能跨函数跳转，破坏结构化编程

死循环:while(1)
        for(;;);
        ctrl+c杀掉死循环，实际发送的信号
辅助控制关键字  break continue
    while()
{
    ........
    wile()
    {
        .....
        break;
        .....
        -----
        continue;
        -----
    }
    ..........
}




	












			五、数组
一维数组
	1、定义
		【存储类型】 数据类型 标识符【下标】
	2、初始化
		不初始化
		部分初始化
		全部初始化
		static
	3、元素引用
		数组名【下标】
	4、数组名
	5、数组越界



二维数组
	1、定义，初始化
		【存储类型】标识符 行下标列下标
	2、元素引用
		数组名【行标】【列标识】
	3、存储形式
		顺序存储，按行存储
	4、深入理解二维数组
		行指针的概念
字符数组
	1、定义，初始化，存储特点
		【存储类型】数据类型 标识符【下标】
		单个字符初始化		字符常量单个''	字符串常量"默认结束符"
		字符串常量初始化 字符串常量有0结束表示
		字符数组、字符指针两种存储字符串的方式
	2、输入输出
	3、常用函数


多维数组
		类似密码锁的格式
		int a[2][3][4]










				六、指针
1、变量与地址
2、指针与指针变量
3、直接访问和间接访问
4、空指针与野指针
5、空类型
6、定义与初始化的书写规则
7、指针与运算
	&	*	关系比较运算 ++ --运算
8、指针与数组
	指针与一维数组
	指针与二维数组
	指针与字符数组
9、const与指针
    const * || 常量指针
    * const || 指针常量
    strcpy const 关键字确保传递过来的内容不会修改 
    memcpy
10、指针数组与数组指针
	数组指针：【存储类型】 数据类型	（*指针名【下标】=值
			如 int (*p)[3]; --> type name -> int[3] *p;
    指针数组:【存储类型】数据类型 *数组名【长度】
            如 int * arr[3];
11、多级指针
        二级指针 void **











                七、函数
1、函数的定义
    数据类型    函数名  (【数据类型 形参名 ，数据类型，形式参数说明表】)
2、函数的传参
    值传递
    地址传递
    全局变量
3、函数的调用
    嵌套调用
    递归调用
4、函数与数组
    数组参与传参【一维数组、二维数组、字符数组】
5、函数与指针
    指针函数
        返回值 * 函数名(形参)
            int * fun(int)
    函数指针
        类型(*指针名)(形参表)
        如: int (*p)(int);
    函数指针数组
        类型 (*数组名【下标】)（形参）
        如: int (*array[N])(int);
    指向指针函数的函数指针数组
    int *(*funcp [N])(int)
函数指针是为了给函数传递参数，        
qsort| pthread_create为给函数传参，叫做回调函数

	









                        八  构造类型
结构体
    1、产生原因，意义
            
    2、类型的描述
        struct  NAME {
            数据类型    成员1
            数据类型    成员2
            ....
        };分号标识这是类型，不占用空间
    int i; int 不占空间 i占用空间

    3、嵌套定义
    4、定义使用，成员变量(常规变量、数组、指针)，初始化和成员引用
        成员引用：变量名.成员名
        指针->成员名
        (*指针).成员名
    5、占用内存空间大小
        sizeof 用来计算结构体在内存中真正占用的内存数    
    结构体对齐，
    函数传值(值传递和指针传递)
共用体
    1、产生及意义
    2、类型描述
        union 共用体名
        {
            数据类型    成员名1
            数据类型    成员名1
        };
    3、嵌套定义
    4、定义变量（变量、数组、指针），初始化及成员引用
    5、所占内存大小
    6、函数传参（值传递和地址传递）
    7、位域

枚举
    enum标识符
    {
        成员1；
        成员2;
        ......
    };
    预处理后，宏定义的会被替换，enum预处理后不会被替换
    本质就是有值得宏，并且不会被预处理替换
    宏的优点是可以传递参数，各有各的作用

    typedef:为已有的数据类型改名
            typedef 旧名字  新名字;



                            九、动态内存管理
malloc、ralloc、realloc、free
原则:谁申请谁释放




























